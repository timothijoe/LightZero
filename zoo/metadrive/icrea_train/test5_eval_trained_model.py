from easydict import EasyDict

# ==============================================================
# begin of the most frequently changed config specified by the user
# ==============================================================
continuous_action_space = True
K = 12  # num_of_sampled_actions
collector_env_num = 1
n_episode = 8
evaluator_env_num = 1
num_simulations = 100
update_per_collect = 200
batch_size = 256
max_env_step = int(1e6)
reanalyze_ratio = 0.
traj_latent_space = 3
# ==============================================================
# end of the most frequently changed config specified by the user
# ==============================================================

pendulum_sampled_efficientzero_config = dict(
    exp_name=
    f'data_sez_ctree/pendulum_sampled_efficientzero_k{K}_ns{num_simulations}_upc{update_per_collect}_rr{reanalyze_ratio}_seed0',
    env=dict(
        env_name='Pendulum-v1',
        continuous=True,
        obs_shape = [6, 200, 200],
        manually_discretization=False,
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
        n_evaluator_episode=evaluator_env_num,
        manager=dict(shared_memory=False, ),
        metadrive=dict(
            use_render=True,
            traffic_density=0.30,  # Density of vehicles occupying the roads, range in [0,1]
            show_seq_traj = True,
            #map='OSOS',  # Int or string: an easy way to fill map_config
            out_of_route_done=True,  # Game over if driving out of road
            seq_traj_len = 20,
            avg_speed=3.0,
            traj_latent_space = traj_latent_space,
            use_chase_camera_follow_lane=True,
            show_interface = False,
            explicit_expert_obs = True,
        ),
    ),
    policy=dict(
        model=dict(
            observation_shape=[6, 200, 200],
            action_space_size=traj_latent_space,
            continuous_action_space=continuous_action_space,
            num_of_sampled_actions=K,
            sigma_type='conditioned',
            model_type='conv',  # options={'mlp', 'conv'}
            lstm_hidden_size=128,
            latent_state_dim=128,
            downsample = True,
            image_channel=6,
        ),
        cuda=True,
        mcts_ctree = True,
        env_type='not_board_games',
        game_segment_length=50,
        update_per_collect=update_per_collect,
        batch_size=batch_size,
        optim_type='Adam',
        lr_piecewise_constant_decay=False,
        learning_rate=0.003,
        # NOTE: for continuous gaussian policy, we use the policy_entropy_loss as in the original Sampled MuZero paper.
        policy_entropy_loss_weight=5e-3,
        num_simulations=num_simulations,
        reanalyze_ratio=reanalyze_ratio,
        n_episode=n_episode,
        eval_freq=int(2e3),
        replay_buffer_size=int(1e6),  # the size/capacity of replay_buffer, in the terms of transitions.
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
    ),
)
pendulum_sampled_efficientzero_config = EasyDict(pendulum_sampled_efficientzero_config)
main_config = pendulum_sampled_efficientzero_config

pendulum_sampled_efficientzero_create_config = dict(
    env=dict(
        type='pendulum_lightzero',
        import_names=['zoo.classic_control.pendulum.envs.pendulum_lightzero_env'],
    ),
    env_manager=dict(type='base'),
    policy=dict(
        type='sampled_efficientzero',
        import_names=['lzero.policy.sampled_efficientzero'],
    ),
    collector=dict(
        type='episode_muzero',
        get_train_sample=True,
        import_names=['lzero.worker.muzero_collector'],
    )
)
pendulum_sampled_efficientzero_create_config = EasyDict(pendulum_sampled_efficientzero_create_config)
create_config = pendulum_sampled_efficientzero_create_config

if __name__ == "__main__":
    # Users can use different train entry by specifying the entry_type.
    entry_type = "train_muzero"  # options={"train_muzero", "train_muzero_with_gym_env"}

    if entry_type == "train_muzero":
        # from lzero.entry import train_muzero
        from lzero.entry.eval_metadrive import eval_metadrive
    elif entry_type == "train_muzero_with_gym_env":
        """
        The ``train_muzero_with_gym_env`` entry means that the environment used in the training process is generated by wrapping the original gym environment with LightZeroEnvWrapper.
        Users can refer to lzero/envs/wrappers for more details.
        """
        #from lzero.entry import train_muzero_with_gym_env as train_muzero
        from lzero.entry.eval_metadrive import eval_metadrive
    zt_path = '/home/SENSETIME/zhoutong/osiris/shlab_data/metadrive/iteration_60000.pth.tar'
    zt_path = None
    zt_path = '/home/rpai_lab_server_1/dec_jan/LightZero/data_ral_jan14_ctree/t1aec_mcts_k12_ns100_upc200_rr0.0_expert_seed0/ckpt/ckpt_best.pth.tar'
    #zt_path = '/home/rpai_lab_server_1/dec_jan/LightZero/data_ral_jan14_ctree/t1aec_mcts_k12_ns100_upc200_rr0.0_expert_seed0/ckpt/ckpt_best.pth (copy).tar'
    #zt_path = '/home/rpai_lab_server_1/dec_jan/LightZero/data_icra_dec31_ctree/t1aec_mcts_k20_ns100_upc200_rr0.0_expert_seed0/ckpt/ckpt_best.pth.tar'
    #zt_path = '/home/PJLAB/puyuan/hoffung/taecrl_data/lz_ckpt/ckpt_best.pth.tar'

    eval_metadrive([main_config, create_config], seed=0, model_path=zt_path,num_episodes_each_seed=20)